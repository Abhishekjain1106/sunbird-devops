version: "3.3"

services:

    prometheus:
        image: quay.io/prometheus/prometheus
        ports:
            - "9090:9090"
        networks:
            - monitoring
        volumes:
            - /var/dockerdata/prometheus/data:/prometheus
        command: "-config.file=/etc/prometheus/prometheus.yml -alertmanager.url http://alertmanager:9093 -storage.local.path=/prometheus -web.console.libraries=/etc/prometheus/console_libraries -storage.local.target-heap-size=157286400 -storage.local.retention=168h0m0s -web.console.templates=/etc/prometheus/consoles"
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "prometheus"
        configs:
            - source: prometheus.yml
              target: /etc/prometheus/prometheus.yml
            - source: prom_node_rules
              target: /etc/prometheus-rules/alertrules.nodes
            - source: prom_container_rules
              target: /etc/prometheus-rules/alertrules.task
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "prometheus"
            placement:
                constraints:
                    - "node.labels.prometheus==1"

    blackbox-exporter:
        image: quay.io/prometheus/blackbox-exporter
        ports:
            - "9115:9115"
        command: "-config.file=/etc/blackbox-exporter/blackboxconfig.yml"
        networks:
            - monitoring
        configs:
            - source: blackboxconfig.yml
              target: /etc/blackbox-exporter/blackboxconfig.yml

    cadvisor:
        image: google/cadvisor:latest
        ports:
            - "8081:8080"
        networks:
            - monitoring
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "cadvisor"
        deploy:
            mode: global
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "cadvisor"

    node-exporter:
        image: basi/node-exporter:v0.1.1
        ports:
            - "9100:9100"
        networks:
            - monitoring
        environment:
            - HOST_HOSTNAME=/etc/hostname
        volumes:
            - /proc:/host/proc
            - /sys:/host/sys
            - /:/rootfs
            - /etc/hostname:/etc/hostname
        command: [ -collector.procfs=/host/proc,-collector.sysfs=/host/proc,-collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)",-collector.textfile.directory=/etc/node-exporter/]
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "node-exporter"
        deploy:
            mode: global
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "node-exporter"

    alertmanager:
        image: prom/alertmanager
        ports:
            - "9093:9093"
        networks:
            - monitoring
        volumes:
            - /var/dockerdata/alertmanager/data:/etc/alertmanager/data
        command: [-config.file=/etc/alertmanager/alertmanagerconfig.yml,-storage.path=/alertmanager/data]
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "alertmanager"
        configs:
            - source: alertmanagerconfig.yml
              target: /etc/alertmanager/alertmanagerconfig.yml
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "alertmanager"
            placement:
                constraints:
                    - "node.labels.monitor==1"

    elasticsearch_exporter:
        image: justwatch/elasticsearch_exporter:1.0.1
        ports:
            - "9108:9108"
        networks:
            - monitoring
        command:
            - '-es.uri=http://{{ monitor.es_host }}:9200'
            - '-es.all=true'
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "elasticsearch_exporter"
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "elasticsearch_exporter"

    postgres_exporter:
        image: wrouesnel/postgres_exporter:v0.2.2
        ports:
            - 9187:9187
        networks:
            - monitoring
        command:
            - '-extend.query-path=/etc/postgres_exporter/postgresmasterqueries.yml'
        environment:
            - DATA_SOURCE_NAME=postgresql://{{ postgres_exporter_user }}:{{ postgres_exporter_password }}@{{ postgres_exporter_postgres_host }}:{{ postgres_exporter_postgres_port }}/postgres?sslmode=disable
        configs:
            - source: blackboxconfig.yml
              target: /etc/postgres_exporter/postgresmasterqueries.yml

    grafana:
        image: grafana/grafana
        ports:
            - "3001:3000"
        networks:
            - monitoring
        volumes:
            - /var/dockerdata/grafana:/var/lib/grafana
        command: -e "GF_SECURITY_ADMIN_PASSWORD={{grafana_admin_password}} PROMETHEUS_ENDPOINT=http://prometheus:9090"
        environment:
            - GF_SERVER_ROOT_URL=http://grafana.local.com/grafana
        labels:
            com.docker.stack.namespace: "monitoring"
            com.docker.service.name: "grafana"
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 60s
            restart_policy:
                condition: on-failure
                max_attempts: 5
            labels:
                com.docker.stack.namespace: "monitoring"
                com.docker.service.name: "grafana"
            placement:
                constraints:
                    - "node.labels.grafana==1"

configs:
  prometheus.yml:
    external: true
  prom_node_rules:
    external: true
  prom_container_rules:
    external: true
  alertmanagerconfig.yml:
    external: true
  blackboxconfig.yml:
    external: true
  postgresmasterqueries.yml:
    external: true

networks:
    monitoring:
        external: true
