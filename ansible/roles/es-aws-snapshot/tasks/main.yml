---

- set_fact: base_path_date="{{ lookup('pipe','date +%Y-%m') }}"

- set_fact: snapshot_number="snapshot_{{ lookup('pipe','date +%s') }}"

# - name: Ensure backup folder exists in aws bucket
#   azure_rm_storageblob:
#     resource_group: "{{ azure_management_resource_group_name }}"
#     storage_account_name: "{{ azure_management_storage_account_name }}"
#     container: "{{ es_azure_backup_container_name }}"
#     state: present
#   environment:
#         AZURE_TENANT: "{{ azure_management_tenant_id }}"
#         AZURE_SUBSCRIPTION_ID: "{{ azure_management_subscription_id }}"
#         AZURE_CLIENT_ID: "{{ azure_management_client_id }}"
#         AZURE_SECRET: "{{ azure_management_client_secret }}"
#   delegate_to: localhost

- name: Create aws snapshot
  uri:
    url: "http://{{ es_snapshot_host }}:9200/_snapshot/{{ snapshot_base_path }}"
    method: PUT
    body: "{{ snapshot_create_request_body | to_json }}"
    headers:
      Content-Type: "application/json"

- name: Take new snapshot
  uri:
    url: "http://{{ es_snapshot_host }}:9200/_snapshot/{{ snapshot_base_path }}/{{ snapshot_number }}"
    method: PUT
    headers:
      Content-Type: "application/json"

- name: Print all snapshots
  uri:
    url: "http://{{ es_snapshot_host }}:9200/_snapshot/{{ snapshot_base_path }}/_all"
    method: GET

- name: Print status of current snapshot
  uri:
    url: "http://{{ es_snapshot_host }}:9200/_snapshot/{{ snapshot_base_path }}/{{ snapshot_number }}"
    method: GET

- name: "Wait for backup to be completed"
  uri:
    url: "http://{{ es_snapshot_host }}:9200/_snapshot/{{ snapshot_base_path }}/{{ snapshot_number }}"
    method: GET
    return_content: yes
    status_code: 200
    body_format: json
  register: result
  until: result.json.snapshots[0].state == 'SUCCESS'
  retries: 120
  delay: 10
